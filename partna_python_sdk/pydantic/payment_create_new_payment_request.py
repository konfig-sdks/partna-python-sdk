# coding: utf-8

"""
    Coinprofile business API

    Coinprofile business API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class PaymentCreateNewPaymentRequest(BaseModel):
    # The business id
    business_id: str = Field(alias='businessId')

    # The rate key
    customer_email: str = Field(alias='customerEmail')

    # The incoming currency
    incoming_currency: str = Field(alias='incomingCurrency')

    # The outgoing currency
    outgoing_currency: str = Field(alias='outgoingCurrency')

    # The payment type
    payment_type: str = Field(alias='paymentType')

    # The account name. Required when paymentType is bank
    account_name: typing.Optional[str] = Field(None, alias='accountName')

    # The account number. Required when paymentType is bank
    account_number: typing.Optional[str] = Field(None, alias='accountNumber')

    # The bank name. Required when paymentType is bank
    bank: typing.Optional[str] = Field(None, alias='bank')

    # The bank code. Required when paymentType is bank
    bank_code: typing.Optional[str] = Field(None, alias='bankCode')

    # The coinprofile username. Required when paymentType is profile
    coinprofile_username: typing.Optional[str] = Field(None, alias='coinprofileUsername')

    # The country. Required when paymentType is bank
    country: typing.Optional[str] = Field(None, alias='country')

    # The incoming amount
    incoming_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='incomingAmount')

    # The outgoing amount
    outgoing_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='outgoingAmount')

    # The rate key
    rate_key: typing.Optional[str] = Field(None, alias='rateKey')

    # The reference
    reference: typing.Optional[str] = Field(None, alias='reference')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
