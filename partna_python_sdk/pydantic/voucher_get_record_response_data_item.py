# coding: utf-8

"""
    Coinprofile business API

    Coinprofile business API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class VoucherGetRecordResponseDataItem(BaseModel):
    # Type of created bank account. Note that this property is only available in v2.
    account_type: typing.Optional[Literal["dynamic", "static"]] = Field(None, alias='accountType')

    amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='amount')

    # This property is optional. Only available if the voucher has been cancelled.
    cancelled_at: typing.Optional[datetime] = Field(None, alias='cancelledAt')

    created_at: typing.Optional[str] = Field(None, alias='createdAt')

    currency: typing.Optional[str] = Field(None, alias='currency')

    # Timestamp of when the voucher was redeemed. If voucher has not been redeemed, this field is undefined.
    date_redeemed: typing.Optional[datetime] = Field(None, alias='dateRedeemed')

    email: typing.Optional[str] = Field(None, alias='email')

    fee: typing.Optional[typing.Union[int, float]] = Field(None, alias='fee')

    fee_bearer: typing.Optional[str] = Field(None, alias='feeBearer')

    fullname: typing.Optional[str] = Field(None, alias='fullname')

    id: typing.Optional[str] = Field(None, alias='id')

    memo: typing.Optional[str] = Field(None, alias='memo')

    merchant: typing.Optional[str] = Field(None, alias='merchant')

    payment_expires_at: typing.Optional[datetime] = Field(None, alias='paymentExpiresAt')

    payment_status: typing.Optional[Literal["paid", "unpaid", "declined"]] = Field(None, alias='paymentStatus')

    # Voucher code. Present only if voucher has been paid
    voucher_code: typing.Optional[str] = Field(None, alias='voucherCode')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
