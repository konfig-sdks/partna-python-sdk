# coding: utf-8

"""
    Coinprofile business API

    Coinprofile business API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class VoucherRedeemExistingUnusedResponseData(BaseModel):
    # Voucher amount after fee deduction
    amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='amount')

    # voucher payment currency
    currency: typing.Optional[Literal["NGN", "USD"]] = Field(None, alias='currency')

    # Merchant's balance after redeeming voucher
    current_balance: typing.Optional[typing.Union[int, float]] = Field(None, alias='currentBalance')

    # Email that aws used to create the voucher
    email: typing.Optional[str] = Field(None, alias='email')

    # The fee associated with voucher
    fee: typing.Optional[typing.Union[int, float]] = Field(None, alias='fee')

    # The bearer of voucher fee
    fee_bearer: typing.Optional[Literal["client", "merchant"]] = Field(None, alias='feeBearer')

    # The amount in the currency that was converted from when conversion was done. If there's no conversion, this is the same as toAmount.
    from_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='fromAmount')

    # The currency from which conversion was done. If there's no conversion, this is the same as toCurrency.
    from_currency: typing.Optional[str] = Field(None, alias='fromCurrency')

    # Voucher ID
    id: typing.Optional[str] = Field(None, alias='id')

    # username of the merchant that created the voucher
    merchant: typing.Optional[str] = Field(None, alias='merchant')

    # Merchant's balance before redeeming voucher
    previous_balance: typing.Optional[typing.Union[int, float]] = Field(None, alias='previousBalance')

    # The exchange rate that was used for conversion when conversion was done. If there's no conversion, the value is 1.
    rate: typing.Optional[typing.Union[int, float]] = Field(None, alias='rate')

    # The amount in the currency that was converted to when conversion was done. If there's no conversion, this is the same as fromAmount.
    to_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='toAmount')

    # The currency to which conversion was done. If there's no conversion, this is the same as fromCurrency.
    to_currency: typing.Optional[str] = Field(None, alias='toCurrency')

    # Voucher code to be redeemed
    voucher_code: typing.Optional[str] = Field(None, alias='voucherCode')

    # Waved fee (if available)
    waved_fee: typing.Optional[typing.Union[int, float]] = Field(None, alias='wavedFee')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
