# coding: utf-8

"""
    Coinprofile business API

    Coinprofile business API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from partna_python_sdk import schemas  # noqa: F401


class BankAccountVerifyAndReturnDetailsResponseData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            accountname = schemas.StrSchema
            accountnumber = schemas.StrSchema
            code = schemas.StrSchema
            country = schemas.StrSchema
            created_at = schemas.StrSchema
            currency = schemas.StrSchema
            deleted_at = schemas.StrSchema
            internalreference = schemas.StrSchema
            is_trashed = schemas.StrSchema
            is_visible = schemas.StrSchema
            name = schemas.StrSchema
            phonenumber = schemas.StrSchema
            responsecode = schemas.StrSchema
            responsemessage = schemas.StrSchema
            uniquereference = schemas.StrSchema
            updated_at = schemas.StrSchema
            __annotations__ = {
                "accountname": accountname,
                "accountnumber": accountnumber,
                "code": code,
                "country": country,
                "created_at": created_at,
                "currency": currency,
                "deleted_at": deleted_at,
                "internalreference": internalreference,
                "is_trashed": is_trashed,
                "is_visible": is_visible,
                "name": name,
                "phonenumber": phonenumber,
                "responsecode": responsecode,
                "responsemessage": responsemessage,
                "uniquereference": uniquereference,
                "updated_at": updated_at,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountname"]) -> MetaOapg.properties.accountname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountnumber"]) -> MetaOapg.properties.accountnumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted_at"]) -> MetaOapg.properties.deleted_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internalreference"]) -> MetaOapg.properties.internalreference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_trashed"]) -> MetaOapg.properties.is_trashed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_visible"]) -> MetaOapg.properties.is_visible: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phonenumber"]) -> MetaOapg.properties.phonenumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responsecode"]) -> MetaOapg.properties.responsecode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responsemessage"]) -> MetaOapg.properties.responsemessage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uniquereference"]) -> MetaOapg.properties.uniquereference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accountname", "accountnumber", "code", "country", "created_at", "currency", "deleted_at", "internalreference", "is_trashed", "is_visible", "name", "phonenumber", "responsecode", "responsemessage", "uniquereference", "updated_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountname"]) -> typing.Union[MetaOapg.properties.accountname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountnumber"]) -> typing.Union[MetaOapg.properties.accountnumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted_at"]) -> typing.Union[MetaOapg.properties.deleted_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internalreference"]) -> typing.Union[MetaOapg.properties.internalreference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_trashed"]) -> typing.Union[MetaOapg.properties.is_trashed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_visible"]) -> typing.Union[MetaOapg.properties.is_visible, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phonenumber"]) -> typing.Union[MetaOapg.properties.phonenumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responsecode"]) -> typing.Union[MetaOapg.properties.responsecode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responsemessage"]) -> typing.Union[MetaOapg.properties.responsemessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uniquereference"]) -> typing.Union[MetaOapg.properties.uniquereference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accountname", "accountnumber", "code", "country", "created_at", "currency", "deleted_at", "internalreference", "is_trashed", "is_visible", "name", "phonenumber", "responsecode", "responsemessage", "uniquereference", "updated_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        accountname: typing.Union[MetaOapg.properties.accountname, str, schemas.Unset] = schemas.unset,
        accountnumber: typing.Union[MetaOapg.properties.accountnumber, str, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        deleted_at: typing.Union[MetaOapg.properties.deleted_at, str, schemas.Unset] = schemas.unset,
        internalreference: typing.Union[MetaOapg.properties.internalreference, str, schemas.Unset] = schemas.unset,
        is_trashed: typing.Union[MetaOapg.properties.is_trashed, str, schemas.Unset] = schemas.unset,
        is_visible: typing.Union[MetaOapg.properties.is_visible, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        phonenumber: typing.Union[MetaOapg.properties.phonenumber, str, schemas.Unset] = schemas.unset,
        responsecode: typing.Union[MetaOapg.properties.responsecode, str, schemas.Unset] = schemas.unset,
        responsemessage: typing.Union[MetaOapg.properties.responsemessage, str, schemas.Unset] = schemas.unset,
        uniquereference: typing.Union[MetaOapg.properties.uniquereference, str, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BankAccountVerifyAndReturnDetailsResponseData':
        return super().__new__(
            cls,
            *args,
            accountname=accountname,
            accountnumber=accountnumber,
            code=code,
            country=country,
            created_at=created_at,
            currency=currency,
            deleted_at=deleted_at,
            internalreference=internalreference,
            is_trashed=is_trashed,
            is_visible=is_visible,
            name=name,
            phonenumber=phonenumber,
            responsecode=responsecode,
            responsemessage=responsemessage,
            uniquereference=uniquereference,
            updated_at=updated_at,
            _configuration=_configuration,
            **kwargs,
        )
