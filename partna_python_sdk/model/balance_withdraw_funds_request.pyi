# coding: utf-8

"""
    Coinprofile business API

    Coinprofile business API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from partna_python_sdk import schemas  # noqa: F401


class BalanceWithdrawFundsRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "bankCode",
            "amount",
            "bank",
            "accountName",
            "currency",
            "accountNumber",
            "otpType",
        }
        
        class properties:
            accountName = schemas.StrSchema
            accountNumber = schemas.StrSchema
            amount = schemas.StrSchema
            bank = schemas.StrSchema
            bankCode = schemas.StrSchema
            currency = schemas.StrSchema
            
            
            class otpType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def OTP(cls):
                    return cls("otp")
                
                @schemas.classproperty
                def TOTP(cls):
                    return cls("totp")
            token = schemas.StrSchema
            __annotations__ = {
                "accountName": accountName,
                "accountNumber": accountNumber,
                "amount": amount,
                "bank": bank,
                "bankCode": bankCode,
                "currency": currency,
                "otpType": otpType,
                "token": token,
            }
    
    bankCode: MetaOapg.properties.bankCode
    amount: MetaOapg.properties.amount
    bank: MetaOapg.properties.bank
    accountName: MetaOapg.properties.accountName
    currency: MetaOapg.properties.currency
    accountNumber: MetaOapg.properties.accountNumber
    otpType: MetaOapg.properties.otpType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountName"]) -> MetaOapg.properties.accountName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountNumber"]) -> MetaOapg.properties.accountNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank"]) -> MetaOapg.properties.bank: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankCode"]) -> MetaOapg.properties.bankCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otpType"]) -> MetaOapg.properties.otpType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accountName", "accountNumber", "amount", "bank", "bankCode", "currency", "otpType", "token", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountName"]) -> MetaOapg.properties.accountName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountNumber"]) -> MetaOapg.properties.accountNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank"]) -> MetaOapg.properties.bank: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankCode"]) -> MetaOapg.properties.bankCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otpType"]) -> MetaOapg.properties.otpType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> typing.Union[MetaOapg.properties.token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accountName", "accountNumber", "amount", "bank", "bankCode", "currency", "otpType", "token", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        bankCode: typing.Union[MetaOapg.properties.bankCode, str, ],
        amount: typing.Union[MetaOapg.properties.amount, str, ],
        bank: typing.Union[MetaOapg.properties.bank, str, ],
        accountName: typing.Union[MetaOapg.properties.accountName, str, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        accountNumber: typing.Union[MetaOapg.properties.accountNumber, str, ],
        otpType: typing.Union[MetaOapg.properties.otpType, str, ],
        token: typing.Union[MetaOapg.properties.token, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BalanceWithdrawFundsRequest':
        return super().__new__(
            cls,
            *args,
            bankCode=bankCode,
            amount=amount,
            bank=bank,
            accountName=accountName,
            currency=currency,
            accountNumber=accountNumber,
            otpType=otpType,
            token=token,
            _configuration=_configuration,
            **kwargs,
        )
