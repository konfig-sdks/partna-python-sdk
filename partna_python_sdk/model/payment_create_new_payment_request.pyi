# coding: utf-8

"""
    Coinprofile business API

    Coinprofile business API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from partna_python_sdk import schemas  # noqa: F401


class PaymentCreateNewPaymentRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "outgoingCurrency",
            "customerEmail",
            "businessId",
            "incomingCurrency",
            "paymentType",
        }
        
        class properties:
            businessId = schemas.StrSchema
            customerEmail = schemas.StrSchema
            incomingCurrency = schemas.StrSchema
            outgoingCurrency = schemas.StrSchema
            paymentType = schemas.StrSchema
            accountName = schemas.StrSchema
            accountNumber = schemas.StrSchema
            bank = schemas.StrSchema
            bankCode = schemas.StrSchema
            coinprofileUsername = schemas.StrSchema
            country = schemas.StrSchema
            incomingAmount = schemas.NumberSchema
            outgoingAmount = schemas.NumberSchema
            rateKey = schemas.StrSchema
            reference = schemas.StrSchema
            __annotations__ = {
                "businessId": businessId,
                "customerEmail": customerEmail,
                "incomingCurrency": incomingCurrency,
                "outgoingCurrency": outgoingCurrency,
                "paymentType": paymentType,
                "accountName": accountName,
                "accountNumber": accountNumber,
                "bank": bank,
                "bankCode": bankCode,
                "coinprofileUsername": coinprofileUsername,
                "country": country,
                "incomingAmount": incomingAmount,
                "outgoingAmount": outgoingAmount,
                "rateKey": rateKey,
                "reference": reference,
            }
    
    outgoingCurrency: MetaOapg.properties.outgoingCurrency
    customerEmail: MetaOapg.properties.customerEmail
    businessId: MetaOapg.properties.businessId
    incomingCurrency: MetaOapg.properties.incomingCurrency
    paymentType: MetaOapg.properties.paymentType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessId"]) -> MetaOapg.properties.businessId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerEmail"]) -> MetaOapg.properties.customerEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incomingCurrency"]) -> MetaOapg.properties.incomingCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outgoingCurrency"]) -> MetaOapg.properties.outgoingCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentType"]) -> MetaOapg.properties.paymentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountName"]) -> MetaOapg.properties.accountName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountNumber"]) -> MetaOapg.properties.accountNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank"]) -> MetaOapg.properties.bank: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankCode"]) -> MetaOapg.properties.bankCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coinprofileUsername"]) -> MetaOapg.properties.coinprofileUsername: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incomingAmount"]) -> MetaOapg.properties.incomingAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outgoingAmount"]) -> MetaOapg.properties.outgoingAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateKey"]) -> MetaOapg.properties.rateKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference"]) -> MetaOapg.properties.reference: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["businessId", "customerEmail", "incomingCurrency", "outgoingCurrency", "paymentType", "accountName", "accountNumber", "bank", "bankCode", "coinprofileUsername", "country", "incomingAmount", "outgoingAmount", "rateKey", "reference", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessId"]) -> MetaOapg.properties.businessId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerEmail"]) -> MetaOapg.properties.customerEmail: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incomingCurrency"]) -> MetaOapg.properties.incomingCurrency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outgoingCurrency"]) -> MetaOapg.properties.outgoingCurrency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentType"]) -> MetaOapg.properties.paymentType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountName"]) -> typing.Union[MetaOapg.properties.accountName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountNumber"]) -> typing.Union[MetaOapg.properties.accountNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank"]) -> typing.Union[MetaOapg.properties.bank, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankCode"]) -> typing.Union[MetaOapg.properties.bankCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coinprofileUsername"]) -> typing.Union[MetaOapg.properties.coinprofileUsername, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incomingAmount"]) -> typing.Union[MetaOapg.properties.incomingAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outgoingAmount"]) -> typing.Union[MetaOapg.properties.outgoingAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateKey"]) -> typing.Union[MetaOapg.properties.rateKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference"]) -> typing.Union[MetaOapg.properties.reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["businessId", "customerEmail", "incomingCurrency", "outgoingCurrency", "paymentType", "accountName", "accountNumber", "bank", "bankCode", "coinprofileUsername", "country", "incomingAmount", "outgoingAmount", "rateKey", "reference", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        outgoingCurrency: typing.Union[MetaOapg.properties.outgoingCurrency, str, ],
        customerEmail: typing.Union[MetaOapg.properties.customerEmail, str, ],
        businessId: typing.Union[MetaOapg.properties.businessId, str, ],
        incomingCurrency: typing.Union[MetaOapg.properties.incomingCurrency, str, ],
        paymentType: typing.Union[MetaOapg.properties.paymentType, str, ],
        accountName: typing.Union[MetaOapg.properties.accountName, str, schemas.Unset] = schemas.unset,
        accountNumber: typing.Union[MetaOapg.properties.accountNumber, str, schemas.Unset] = schemas.unset,
        bank: typing.Union[MetaOapg.properties.bank, str, schemas.Unset] = schemas.unset,
        bankCode: typing.Union[MetaOapg.properties.bankCode, str, schemas.Unset] = schemas.unset,
        coinprofileUsername: typing.Union[MetaOapg.properties.coinprofileUsername, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        incomingAmount: typing.Union[MetaOapg.properties.incomingAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        outgoingAmount: typing.Union[MetaOapg.properties.outgoingAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateKey: typing.Union[MetaOapg.properties.rateKey, str, schemas.Unset] = schemas.unset,
        reference: typing.Union[MetaOapg.properties.reference, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentCreateNewPaymentRequest':
        return super().__new__(
            cls,
            *args,
            outgoingCurrency=outgoingCurrency,
            customerEmail=customerEmail,
            businessId=businessId,
            incomingCurrency=incomingCurrency,
            paymentType=paymentType,
            accountName=accountName,
            accountNumber=accountNumber,
            bank=bank,
            bankCode=bankCode,
            coinprofileUsername=coinprofileUsername,
            country=country,
            incomingAmount=incomingAmount,
            outgoingAmount=outgoingAmount,
            rateKey=rateKey,
            reference=reference,
            _configuration=_configuration,
            **kwargs,
        )
