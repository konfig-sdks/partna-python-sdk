# coding: utf-8

"""
    Coinprofile business API

    Coinprofile business API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from partna_python_sdk import schemas  # noqa: F401


class VoucherRedeemAndWithdrawRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "cryptoAddress",
            "currency",
            "email",
            "voucherCode",
            "network",
        }
        
        class properties:
            cryptoAddress = schemas.StrSchema
            
            
            class currency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def USDC(cls):
                    return cls("USDC")
                
                @schemas.classproperty
                def USDT(cls):
                    return cls("USDT")
            email = schemas.StrSchema
            network = schemas.StrSchema
            voucherCode = schemas.StrSchema
            merchantFee = schemas.StrSchema
            rateKey = schemas.StrSchema
            __annotations__ = {
                "cryptoAddress": cryptoAddress,
                "currency": currency,
                "email": email,
                "network": network,
                "voucherCode": voucherCode,
                "merchantFee": merchantFee,
                "rateKey": rateKey,
            }
    
    cryptoAddress: MetaOapg.properties.cryptoAddress
    currency: MetaOapg.properties.currency
    email: MetaOapg.properties.email
    voucherCode: MetaOapg.properties.voucherCode
    network: MetaOapg.properties.network
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cryptoAddress"]) -> MetaOapg.properties.cryptoAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network"]) -> MetaOapg.properties.network: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voucherCode"]) -> MetaOapg.properties.voucherCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantFee"]) -> MetaOapg.properties.merchantFee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateKey"]) -> MetaOapg.properties.rateKey: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cryptoAddress", "currency", "email", "network", "voucherCode", "merchantFee", "rateKey", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cryptoAddress"]) -> MetaOapg.properties.cryptoAddress: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network"]) -> MetaOapg.properties.network: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voucherCode"]) -> MetaOapg.properties.voucherCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantFee"]) -> typing.Union[MetaOapg.properties.merchantFee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateKey"]) -> typing.Union[MetaOapg.properties.rateKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cryptoAddress", "currency", "email", "network", "voucherCode", "merchantFee", "rateKey", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cryptoAddress: typing.Union[MetaOapg.properties.cryptoAddress, str, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        voucherCode: typing.Union[MetaOapg.properties.voucherCode, str, ],
        network: typing.Union[MetaOapg.properties.network, str, ],
        merchantFee: typing.Union[MetaOapg.properties.merchantFee, str, schemas.Unset] = schemas.unset,
        rateKey: typing.Union[MetaOapg.properties.rateKey, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VoucherRedeemAndWithdrawRequest':
        return super().__new__(
            cls,
            *args,
            cryptoAddress=cryptoAddress,
            currency=currency,
            email=email,
            voucherCode=voucherCode,
            network=network,
            merchantFee=merchantFee,
            rateKey=rateKey,
            _configuration=_configuration,
            **kwargs,
        )
