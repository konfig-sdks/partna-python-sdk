# coding: utf-8

"""
    Coinprofile business API

    Coinprofile business API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from partna_python_sdk import schemas  # noqa: F401


class BalanceGetAccountBalance200ResponseDataBalances(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            amount = schemas.Int32Schema
            formattedAmount = schemas.Int32Schema
            toCurrency = schemas.StrSchema
            totalRecieved = schemas.Int32Schema
            totalSent = schemas.Int32Schema
            txnCount = schemas.NumberSchema
            __annotations__ = {
                "amount": amount,
                "formattedAmount": formattedAmount,
                "toCurrency": toCurrency,
                "totalRecieved": totalRecieved,
                "totalSent": totalSent,
                "txnCount": txnCount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formattedAmount"]) -> MetaOapg.properties.formattedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toCurrency"]) -> MetaOapg.properties.toCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalRecieved"]) -> MetaOapg.properties.totalRecieved: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalSent"]) -> MetaOapg.properties.totalSent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["txnCount"]) -> MetaOapg.properties.txnCount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "formattedAmount", "toCurrency", "totalRecieved", "totalSent", "txnCount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formattedAmount"]) -> typing.Union[MetaOapg.properties.formattedAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toCurrency"]) -> typing.Union[MetaOapg.properties.toCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalRecieved"]) -> typing.Union[MetaOapg.properties.totalRecieved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalSent"]) -> typing.Union[MetaOapg.properties.totalSent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["txnCount"]) -> typing.Union[MetaOapg.properties.txnCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "formattedAmount", "toCurrency", "totalRecieved", "totalSent", "txnCount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        formattedAmount: typing.Union[MetaOapg.properties.formattedAmount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        toCurrency: typing.Union[MetaOapg.properties.toCurrency, str, schemas.Unset] = schemas.unset,
        totalRecieved: typing.Union[MetaOapg.properties.totalRecieved, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        totalSent: typing.Union[MetaOapg.properties.totalSent, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        txnCount: typing.Union[MetaOapg.properties.txnCount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BalanceGetAccountBalance200ResponseDataBalances':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            formattedAmount=formattedAmount,
            toCurrency=toCurrency,
            totalRecieved=totalRecieved,
            totalSent=totalSent,
            txnCount=txnCount,
            _configuration=_configuration,
            **kwargs,
        )
