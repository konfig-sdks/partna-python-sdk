# coding: utf-8

"""
    Coinprofile business API

    Coinprofile business API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from partna_python_sdk import schemas  # noqa: F401


class VoucherGetMultipleRecordsResponseDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            amount = schemas.NumberSchema
            createdAt = schemas.DateTimeSchema
            currency = schemas.StrSchema
            dateRedeemed = schemas.DateTimeSchema
            email = schemas.StrSchema
            expectedAmount = schemas.NumberSchema
            fee = schemas.NumberSchema
            
            
            class feeBearer(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "client": "CLIENT",
                        "merchant": "MERCHANT",
                    }
                
                @schemas.classproperty
                def CLIENT(cls):
                    return cls("client")
                
                @schemas.classproperty
                def MERCHANT(cls):
                    return cls("merchant")
            fullname = schemas.StrSchema
            id = schemas.StrSchema
            memo = schemas.StrSchema
            merchant = schemas.StrSchema
            paidAt = schemas.DateTimeSchema
            
            
            class paymentStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "paid": "PAID",
                        "unpaid": "UNPAID",
                    }
                
                @schemas.classproperty
                def PAID(cls):
                    return cls("paid")
                
                @schemas.classproperty
                def UNPAID(cls):
                    return cls("unpaid")
            rate = schemas.NumberSchema
            rateKey = schemas.StrSchema
            receivedAmount = schemas.NumberSchema
            voucherCode = schemas.StrSchema
            __annotations__ = {
                "amount": amount,
                "createdAt": createdAt,
                "currency": currency,
                "dateRedeemed": dateRedeemed,
                "email": email,
                "expectedAmount": expectedAmount,
                "fee": fee,
                "feeBearer": feeBearer,
                "fullname": fullname,
                "id": id,
                "memo": memo,
                "merchant": merchant,
                "paidAt": paidAt,
                "paymentStatus": paymentStatus,
                "rate": rate,
                "rateKey": rateKey,
                "receivedAmount": receivedAmount,
                "voucherCode": voucherCode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateRedeemed"]) -> MetaOapg.properties.dateRedeemed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expectedAmount"]) -> MetaOapg.properties.expectedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fee"]) -> MetaOapg.properties.fee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feeBearer"]) -> MetaOapg.properties.feeBearer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fullname"]) -> MetaOapg.properties.fullname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memo"]) -> MetaOapg.properties.memo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchant"]) -> MetaOapg.properties.merchant: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paidAt"]) -> MetaOapg.properties.paidAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentStatus"]) -> MetaOapg.properties.paymentStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate"]) -> MetaOapg.properties.rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateKey"]) -> MetaOapg.properties.rateKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receivedAmount"]) -> MetaOapg.properties.receivedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voucherCode"]) -> MetaOapg.properties.voucherCode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "createdAt", "currency", "dateRedeemed", "email", "expectedAmount", "fee", "feeBearer", "fullname", "id", "memo", "merchant", "paidAt", "paymentStatus", "rate", "rateKey", "receivedAmount", "voucherCode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateRedeemed"]) -> typing.Union[MetaOapg.properties.dateRedeemed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expectedAmount"]) -> typing.Union[MetaOapg.properties.expectedAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fee"]) -> typing.Union[MetaOapg.properties.fee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feeBearer"]) -> typing.Union[MetaOapg.properties.feeBearer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fullname"]) -> typing.Union[MetaOapg.properties.fullname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memo"]) -> typing.Union[MetaOapg.properties.memo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchant"]) -> typing.Union[MetaOapg.properties.merchant, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paidAt"]) -> typing.Union[MetaOapg.properties.paidAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentStatus"]) -> typing.Union[MetaOapg.properties.paymentStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate"]) -> typing.Union[MetaOapg.properties.rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateKey"]) -> typing.Union[MetaOapg.properties.rateKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receivedAmount"]) -> typing.Union[MetaOapg.properties.receivedAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voucherCode"]) -> typing.Union[MetaOapg.properties.voucherCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "createdAt", "currency", "dateRedeemed", "email", "expectedAmount", "fee", "feeBearer", "fullname", "id", "memo", "merchant", "paidAt", "paymentStatus", "rate", "rateKey", "receivedAmount", "voucherCode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        dateRedeemed: typing.Union[MetaOapg.properties.dateRedeemed, str, datetime, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        expectedAmount: typing.Union[MetaOapg.properties.expectedAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fee: typing.Union[MetaOapg.properties.fee, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        feeBearer: typing.Union[MetaOapg.properties.feeBearer, str, schemas.Unset] = schemas.unset,
        fullname: typing.Union[MetaOapg.properties.fullname, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        memo: typing.Union[MetaOapg.properties.memo, str, schemas.Unset] = schemas.unset,
        merchant: typing.Union[MetaOapg.properties.merchant, str, schemas.Unset] = schemas.unset,
        paidAt: typing.Union[MetaOapg.properties.paidAt, str, datetime, schemas.Unset] = schemas.unset,
        paymentStatus: typing.Union[MetaOapg.properties.paymentStatus, str, schemas.Unset] = schemas.unset,
        rate: typing.Union[MetaOapg.properties.rate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rateKey: typing.Union[MetaOapg.properties.rateKey, str, schemas.Unset] = schemas.unset,
        receivedAmount: typing.Union[MetaOapg.properties.receivedAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        voucherCode: typing.Union[MetaOapg.properties.voucherCode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VoucherGetMultipleRecordsResponseDataItem':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            createdAt=createdAt,
            currency=currency,
            dateRedeemed=dateRedeemed,
            email=email,
            expectedAmount=expectedAmount,
            fee=fee,
            feeBearer=feeBearer,
            fullname=fullname,
            id=id,
            memo=memo,
            merchant=merchant,
            paidAt=paidAt,
            paymentStatus=paymentStatus,
            rate=rate,
            rateKey=rateKey,
            receivedAmount=receivedAmount,
            voucherCode=voucherCode,
            _configuration=_configuration,
            **kwargs,
        )
