# coding: utf-8

"""
    Coinprofile business API

    Coinprofile business API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from partna_python_sdk import schemas  # noqa: F401


class VoucherRedeemExistingUnusedResponseData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            amount = schemas.NumberSchema
            
            
            class currency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NGN(cls):
                    return cls("NGN")
                
                @schemas.classproperty
                def USD(cls):
                    return cls("USD")
            currentBalance = schemas.NumberSchema
            email = schemas.StrSchema
            fee = schemas.NumberSchema
            
            
            class feeBearer(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CLIENT(cls):
                    return cls("client")
                
                @schemas.classproperty
                def MERCHANT(cls):
                    return cls("merchant")
            fromAmount = schemas.NumberSchema
            fromCurrency = schemas.StrSchema
            id = schemas.StrSchema
            merchant = schemas.StrSchema
            previousBalance = schemas.NumberSchema
            rate = schemas.NumberSchema
            toAmount = schemas.NumberSchema
            toCurrency = schemas.StrSchema
            voucherCode = schemas.StrSchema
            wavedFee = schemas.NumberSchema
            __annotations__ = {
                "amount": amount,
                "currency": currency,
                "currentBalance": currentBalance,
                "email": email,
                "fee": fee,
                "feeBearer": feeBearer,
                "fromAmount": fromAmount,
                "fromCurrency": fromCurrency,
                "id": id,
                "merchant": merchant,
                "previousBalance": previousBalance,
                "rate": rate,
                "toAmount": toAmount,
                "toCurrency": toCurrency,
                "voucherCode": voucherCode,
                "wavedFee": wavedFee,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentBalance"]) -> MetaOapg.properties.currentBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fee"]) -> MetaOapg.properties.fee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feeBearer"]) -> MetaOapg.properties.feeBearer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fromAmount"]) -> MetaOapg.properties.fromAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fromCurrency"]) -> MetaOapg.properties.fromCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchant"]) -> MetaOapg.properties.merchant: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["previousBalance"]) -> MetaOapg.properties.previousBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate"]) -> MetaOapg.properties.rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toAmount"]) -> MetaOapg.properties.toAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toCurrency"]) -> MetaOapg.properties.toCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voucherCode"]) -> MetaOapg.properties.voucherCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wavedFee"]) -> MetaOapg.properties.wavedFee: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "currency", "currentBalance", "email", "fee", "feeBearer", "fromAmount", "fromCurrency", "id", "merchant", "previousBalance", "rate", "toAmount", "toCurrency", "voucherCode", "wavedFee", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentBalance"]) -> typing.Union[MetaOapg.properties.currentBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fee"]) -> typing.Union[MetaOapg.properties.fee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feeBearer"]) -> typing.Union[MetaOapg.properties.feeBearer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fromAmount"]) -> typing.Union[MetaOapg.properties.fromAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fromCurrency"]) -> typing.Union[MetaOapg.properties.fromCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchant"]) -> typing.Union[MetaOapg.properties.merchant, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["previousBalance"]) -> typing.Union[MetaOapg.properties.previousBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate"]) -> typing.Union[MetaOapg.properties.rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toAmount"]) -> typing.Union[MetaOapg.properties.toAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toCurrency"]) -> typing.Union[MetaOapg.properties.toCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voucherCode"]) -> typing.Union[MetaOapg.properties.voucherCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wavedFee"]) -> typing.Union[MetaOapg.properties.wavedFee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "currency", "currentBalance", "email", "fee", "feeBearer", "fromAmount", "fromCurrency", "id", "merchant", "previousBalance", "rate", "toAmount", "toCurrency", "voucherCode", "wavedFee", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        currentBalance: typing.Union[MetaOapg.properties.currentBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        fee: typing.Union[MetaOapg.properties.fee, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        feeBearer: typing.Union[MetaOapg.properties.feeBearer, str, schemas.Unset] = schemas.unset,
        fromAmount: typing.Union[MetaOapg.properties.fromAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fromCurrency: typing.Union[MetaOapg.properties.fromCurrency, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        merchant: typing.Union[MetaOapg.properties.merchant, str, schemas.Unset] = schemas.unset,
        previousBalance: typing.Union[MetaOapg.properties.previousBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rate: typing.Union[MetaOapg.properties.rate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        toAmount: typing.Union[MetaOapg.properties.toAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        toCurrency: typing.Union[MetaOapg.properties.toCurrency, str, schemas.Unset] = schemas.unset,
        voucherCode: typing.Union[MetaOapg.properties.voucherCode, str, schemas.Unset] = schemas.unset,
        wavedFee: typing.Union[MetaOapg.properties.wavedFee, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VoucherRedeemExistingUnusedResponseData':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            currency=currency,
            currentBalance=currentBalance,
            email=email,
            fee=fee,
            feeBearer=feeBearer,
            fromAmount=fromAmount,
            fromCurrency=fromCurrency,
            id=id,
            merchant=merchant,
            previousBalance=previousBalance,
            rate=rate,
            toAmount=toAmount,
            toCurrency=toCurrency,
            voucherCode=voucherCode,
            wavedFee=wavedFee,
            _configuration=_configuration,
            **kwargs,
        )
