# coding: utf-8

"""
    Coinprofile business API

    Coinprofile business API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from partna_python_sdk import schemas  # noqa: F401


class VoucherCreatePaymentRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "amount",
            "currency",
            "fullname",
            "email",
        }
        
        class properties:
            amount = schemas.Int32Schema
            
            
            class currency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NGN(cls):
                    return cls("NGN")
                
                @schemas.classproperty
                def USD(cls):
                    return cls("USD")
            email = schemas.StrSchema
            fullname = schemas.StrSchema
            rateKey = schemas.StrSchema
            __annotations__ = {
                "amount": amount,
                "currency": currency,
                "email": email,
                "fullname": fullname,
                "rateKey": rateKey,
            }
    
    amount: MetaOapg.properties.amount
    currency: MetaOapg.properties.currency
    fullname: MetaOapg.properties.fullname
    email: MetaOapg.properties.email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fullname"]) -> MetaOapg.properties.fullname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateKey"]) -> MetaOapg.properties.rateKey: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "currency", "email", "fullname", "rateKey", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fullname"]) -> MetaOapg.properties.fullname: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateKey"]) -> typing.Union[MetaOapg.properties.rateKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "currency", "email", "fullname", "rateKey", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        fullname: typing.Union[MetaOapg.properties.fullname, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        rateKey: typing.Union[MetaOapg.properties.rateKey, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VoucherCreatePaymentRequest':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            currency=currency,
            fullname=fullname,
            email=email,
            rateKey=rateKey,
            _configuration=_configuration,
            **kwargs,
        )
