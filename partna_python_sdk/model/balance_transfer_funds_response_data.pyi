# coding: utf-8

"""
    Coinprofile business API

    Coinprofile business API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from partna_python_sdk import schemas  # noqa: F401


class BalanceTransferFundsResponseData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            amount = schemas.StrSchema
            date = schemas.DateSchema
            
            
            class fromCurrency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NGN(cls):
                    return cls("NGN")
                
                @schemas.classproperty
                def USD(cls):
                    return cls("USD")
            receiveAmount = schemas.StrSchema
            sender = schemas.StrSchema
            senderPrevbalance = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def FULLFILED(cls):
                    return cls("fullfiled")
                
                @schemas.classproperty
                def PROCESSING(cls):
                    return cls("processing")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("failed")
            
            
            class toCurrency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NGN(cls):
                    return cls("NGN")
                
                @schemas.classproperty
                def USD(cls):
                    return cls("USD")
            transactionId = schemas.StrSchema
            username = schemas.StrSchema
            __annotations__ = {
                "amount": amount,
                "date": date,
                "fromCurrency": fromCurrency,
                "receiveAmount": receiveAmount,
                "sender": sender,
                "senderPrevbalance": senderPrevbalance,
                "status": status,
                "toCurrency": toCurrency,
                "transactionId": transactionId,
                "username": username,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fromCurrency"]) -> MetaOapg.properties.fromCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receiveAmount"]) -> MetaOapg.properties.receiveAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sender"]) -> MetaOapg.properties.sender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["senderPrevbalance"]) -> MetaOapg.properties.senderPrevbalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toCurrency"]) -> MetaOapg.properties.toCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionId"]) -> MetaOapg.properties.transactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "date", "fromCurrency", "receiveAmount", "sender", "senderPrevbalance", "status", "toCurrency", "transactionId", "username", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fromCurrency"]) -> typing.Union[MetaOapg.properties.fromCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receiveAmount"]) -> typing.Union[MetaOapg.properties.receiveAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sender"]) -> typing.Union[MetaOapg.properties.sender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["senderPrevbalance"]) -> typing.Union[MetaOapg.properties.senderPrevbalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toCurrency"]) -> typing.Union[MetaOapg.properties.toCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionId"]) -> typing.Union[MetaOapg.properties.transactionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "date", "fromCurrency", "receiveAmount", "sender", "senderPrevbalance", "status", "toCurrency", "transactionId", "username", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, str, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, date, schemas.Unset] = schemas.unset,
        fromCurrency: typing.Union[MetaOapg.properties.fromCurrency, str, schemas.Unset] = schemas.unset,
        receiveAmount: typing.Union[MetaOapg.properties.receiveAmount, str, schemas.Unset] = schemas.unset,
        sender: typing.Union[MetaOapg.properties.sender, str, schemas.Unset] = schemas.unset,
        senderPrevbalance: typing.Union[MetaOapg.properties.senderPrevbalance, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        toCurrency: typing.Union[MetaOapg.properties.toCurrency, str, schemas.Unset] = schemas.unset,
        transactionId: typing.Union[MetaOapg.properties.transactionId, str, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BalanceTransferFundsResponseData':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            date=date,
            fromCurrency=fromCurrency,
            receiveAmount=receiveAmount,
            sender=sender,
            senderPrevbalance=senderPrevbalance,
            status=status,
            toCurrency=toCurrency,
            transactionId=transactionId,
            username=username,
            _configuration=_configuration,
            **kwargs,
        )
