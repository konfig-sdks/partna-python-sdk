# coding: utf-8

"""
    Coinprofile business API

    Coinprofile business API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from partna_python_sdk import schemas  # noqa: F401


class TransactionGetUserTransactionSummaryResponseDataTxnDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            version = schemas.StrSchema
            amount = schemas.NumberSchema
            businessId = schemas.StrSchema
            createdAt = schemas.DateTimeSchema
            currency = schemas.StrSchema
            date = schemas.StrSchema
            fee = schemas.NumberSchema
            fromAmount = schemas.NumberSchema
            fromCurrency = schemas.StrSchema
            isFromRegUser = schemas.BoolSchema
            prevBalance = schemas.NumberSchema
            sender = schemas.StrSchema
            senderPrevbalance = schemas.NumberSchema
            status = schemas.StrSchema
            transactionId = schemas.StrSchema
            type = schemas.StrSchema
            updatedAt = schemas.DateTimeSchema
            username = schemas.StrSchema
            __annotations__ = {
                "version": version,
                "amount": amount,
                "businessId": businessId,
                "createdAt": createdAt,
                "currency": currency,
                "date": date,
                "fee": fee,
                "fromAmount": fromAmount,
                "fromCurrency": fromCurrency,
                "isFromRegUser": isFromRegUser,
                "prevBalance": prevBalance,
                "sender": sender,
                "senderPrevbalance": senderPrevbalance,
                "status": status,
                "transactionId": transactionId,
                "type": type,
                "updatedAt": updatedAt,
                "username": username,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessId"]) -> MetaOapg.properties.businessId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fee"]) -> MetaOapg.properties.fee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fromAmount"]) -> MetaOapg.properties.fromAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fromCurrency"]) -> MetaOapg.properties.fromCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isFromRegUser"]) -> MetaOapg.properties.isFromRegUser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prevBalance"]) -> MetaOapg.properties.prevBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sender"]) -> MetaOapg.properties.sender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["senderPrevbalance"]) -> MetaOapg.properties.senderPrevbalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionId"]) -> MetaOapg.properties.transactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "amount", "businessId", "createdAt", "currency", "date", "fee", "fromAmount", "fromCurrency", "isFromRegUser", "prevBalance", "sender", "senderPrevbalance", "status", "transactionId", "type", "updatedAt", "username", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessId"]) -> typing.Union[MetaOapg.properties.businessId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fee"]) -> typing.Union[MetaOapg.properties.fee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fromAmount"]) -> typing.Union[MetaOapg.properties.fromAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fromCurrency"]) -> typing.Union[MetaOapg.properties.fromCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isFromRegUser"]) -> typing.Union[MetaOapg.properties.isFromRegUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prevBalance"]) -> typing.Union[MetaOapg.properties.prevBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sender"]) -> typing.Union[MetaOapg.properties.sender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["senderPrevbalance"]) -> typing.Union[MetaOapg.properties.senderPrevbalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionId"]) -> typing.Union[MetaOapg.properties.transactionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> typing.Union[MetaOapg.properties.updatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "amount", "businessId", "createdAt", "currency", "date", "fee", "fromAmount", "fromCurrency", "isFromRegUser", "prevBalance", "sender", "senderPrevbalance", "status", "transactionId", "type", "updatedAt", "username", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        businessId: typing.Union[MetaOapg.properties.businessId, str, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, schemas.Unset] = schemas.unset,
        fee: typing.Union[MetaOapg.properties.fee, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fromAmount: typing.Union[MetaOapg.properties.fromAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fromCurrency: typing.Union[MetaOapg.properties.fromCurrency, str, schemas.Unset] = schemas.unset,
        isFromRegUser: typing.Union[MetaOapg.properties.isFromRegUser, bool, schemas.Unset] = schemas.unset,
        prevBalance: typing.Union[MetaOapg.properties.prevBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sender: typing.Union[MetaOapg.properties.sender, str, schemas.Unset] = schemas.unset,
        senderPrevbalance: typing.Union[MetaOapg.properties.senderPrevbalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        transactionId: typing.Union[MetaOapg.properties.transactionId, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, str, datetime, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TransactionGetUserTransactionSummaryResponseDataTxnDataItem':
        return super().__new__(
            cls,
            *args,
            version=version,
            amount=amount,
            businessId=businessId,
            createdAt=createdAt,
            currency=currency,
            date=date,
            fee=fee,
            fromAmount=fromAmount,
            fromCurrency=fromCurrency,
            isFromRegUser=isFromRegUser,
            prevBalance=prevBalance,
            sender=sender,
            senderPrevbalance=senderPrevbalance,
            status=status,
            transactionId=transactionId,
            type=type,
            updatedAt=updatedAt,
            username=username,
            _configuration=_configuration,
            **kwargs,
        )
