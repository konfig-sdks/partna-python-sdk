# coding: utf-8

"""
    Coinprofile business API

    Coinprofile business API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from partna_python_sdk import schemas  # noqa: F401


class PaymentCreateNewPaymentResponseData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            _id = schemas.StrSchema
            account = schemas.StrSchema
            address = schemas.StrSchema
            businessId = schemas.StrSchema
            confirmedAmount = schemas.Int32Schema
            createdAt = schemas.StrSchema
            customerEmail = schemas.StrSchema
            expTime = schemas.StrSchema
            incomingAmount = schemas.Int32Schema
            incomingCurrency = schemas.StrSchema
            outgoingAmount = schemas.Int32Schema
            outgoingCurrency = schemas.StrSchema
            paymentType = schemas.StrSchema
            rate = schemas.Int32Schema
            reference = schemas.StrSchema
            senderUsername = schemas.StrSchema
            state = schemas.StrSchema
            threadTS = schemas.StrSchema
            unconfirmedAmount = schemas.Int32Schema
            updatedAt = schemas.StrSchema
            __annotations__ = {
                "_id": _id,
                "account": account,
                "address": address,
                "businessId": businessId,
                "confirmedAmount": confirmedAmount,
                "createdAt": createdAt,
                "customerEmail": customerEmail,
                "expTime": expTime,
                "incomingAmount": incomingAmount,
                "incomingCurrency": incomingCurrency,
                "outgoingAmount": outgoingAmount,
                "outgoingCurrency": outgoingCurrency,
                "paymentType": paymentType,
                "rate": rate,
                "reference": reference,
                "senderUsername": senderUsername,
                "state": state,
                "threadTS": threadTS,
                "unconfirmedAmount": unconfirmedAmount,
                "updatedAt": updatedAt,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessId"]) -> MetaOapg.properties.businessId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confirmedAmount"]) -> MetaOapg.properties.confirmedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerEmail"]) -> MetaOapg.properties.customerEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expTime"]) -> MetaOapg.properties.expTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incomingAmount"]) -> MetaOapg.properties.incomingAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incomingCurrency"]) -> MetaOapg.properties.incomingCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outgoingAmount"]) -> MetaOapg.properties.outgoingAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outgoingCurrency"]) -> MetaOapg.properties.outgoingCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentType"]) -> MetaOapg.properties.paymentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate"]) -> MetaOapg.properties.rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference"]) -> MetaOapg.properties.reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["senderUsername"]) -> MetaOapg.properties.senderUsername: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["threadTS"]) -> MetaOapg.properties.threadTS: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unconfirmedAmount"]) -> MetaOapg.properties.unconfirmedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["_id", "account", "address", "businessId", "confirmedAmount", "createdAt", "customerEmail", "expTime", "incomingAmount", "incomingCurrency", "outgoingAmount", "outgoingCurrency", "paymentType", "rate", "reference", "senderUsername", "state", "threadTS", "unconfirmedAmount", "updatedAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_id"]) -> typing.Union[MetaOapg.properties._id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> typing.Union[MetaOapg.properties.account, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessId"]) -> typing.Union[MetaOapg.properties.businessId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confirmedAmount"]) -> typing.Union[MetaOapg.properties.confirmedAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerEmail"]) -> typing.Union[MetaOapg.properties.customerEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expTime"]) -> typing.Union[MetaOapg.properties.expTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incomingAmount"]) -> typing.Union[MetaOapg.properties.incomingAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incomingCurrency"]) -> typing.Union[MetaOapg.properties.incomingCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outgoingAmount"]) -> typing.Union[MetaOapg.properties.outgoingAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outgoingCurrency"]) -> typing.Union[MetaOapg.properties.outgoingCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentType"]) -> typing.Union[MetaOapg.properties.paymentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate"]) -> typing.Union[MetaOapg.properties.rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference"]) -> typing.Union[MetaOapg.properties.reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["senderUsername"]) -> typing.Union[MetaOapg.properties.senderUsername, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["threadTS"]) -> typing.Union[MetaOapg.properties.threadTS, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unconfirmedAmount"]) -> typing.Union[MetaOapg.properties.unconfirmedAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> typing.Union[MetaOapg.properties.updatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["_id", "account", "address", "businessId", "confirmedAmount", "createdAt", "customerEmail", "expTime", "incomingAmount", "incomingCurrency", "outgoingAmount", "outgoingCurrency", "paymentType", "rate", "reference", "senderUsername", "state", "threadTS", "unconfirmedAmount", "updatedAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _id: typing.Union[MetaOapg.properties._id, str, schemas.Unset] = schemas.unset,
        account: typing.Union[MetaOapg.properties.account, str, schemas.Unset] = schemas.unset,
        address: typing.Union[MetaOapg.properties.address, str, schemas.Unset] = schemas.unset,
        businessId: typing.Union[MetaOapg.properties.businessId, str, schemas.Unset] = schemas.unset,
        confirmedAmount: typing.Union[MetaOapg.properties.confirmedAmount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, schemas.Unset] = schemas.unset,
        customerEmail: typing.Union[MetaOapg.properties.customerEmail, str, schemas.Unset] = schemas.unset,
        expTime: typing.Union[MetaOapg.properties.expTime, str, schemas.Unset] = schemas.unset,
        incomingAmount: typing.Union[MetaOapg.properties.incomingAmount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        incomingCurrency: typing.Union[MetaOapg.properties.incomingCurrency, str, schemas.Unset] = schemas.unset,
        outgoingAmount: typing.Union[MetaOapg.properties.outgoingAmount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        outgoingCurrency: typing.Union[MetaOapg.properties.outgoingCurrency, str, schemas.Unset] = schemas.unset,
        paymentType: typing.Union[MetaOapg.properties.paymentType, str, schemas.Unset] = schemas.unset,
        rate: typing.Union[MetaOapg.properties.rate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        reference: typing.Union[MetaOapg.properties.reference, str, schemas.Unset] = schemas.unset,
        senderUsername: typing.Union[MetaOapg.properties.senderUsername, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        threadTS: typing.Union[MetaOapg.properties.threadTS, str, schemas.Unset] = schemas.unset,
        unconfirmedAmount: typing.Union[MetaOapg.properties.unconfirmedAmount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentCreateNewPaymentResponseData':
        return super().__new__(
            cls,
            *args,
            _id=_id,
            account=account,
            address=address,
            businessId=businessId,
            confirmedAmount=confirmedAmount,
            createdAt=createdAt,
            customerEmail=customerEmail,
            expTime=expTime,
            incomingAmount=incomingAmount,
            incomingCurrency=incomingCurrency,
            outgoingAmount=outgoingAmount,
            outgoingCurrency=outgoingCurrency,
            paymentType=paymentType,
            rate=rate,
            reference=reference,
            senderUsername=senderUsername,
            state=state,
            threadTS=threadTS,
            unconfirmedAmount=unconfirmedAmount,
            updatedAt=updatedAt,
            _configuration=_configuration,
            **kwargs,
        )
